// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from command.proto</summary>
  public static partial class CommandReflection {

    #region Descriptor
    /// <summary>File descriptor for command.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1jb21tYW5kLnByb3RvEgJwYiI0CgRQYWNrEgwKBHR5cGUYASABKAUSDwoH",
            "Y29udGVudBgCIAEoDBINCgVtc2dpZBgDIAEoBSLCAwoFRXJyb3ISHQoEY29k",
            "ZRgBIAEoDjIPLnBiLkVycm9yLkVUeXBlEgwKBHR5cGUYAiABKAUiiwMKBUVU",
            "eXBlEggKBE5vbmUQABIQCgxVc2VyTG9nZ2VkSW4QARIRCg1Ob1NldE5pY2tu",
            "YW1lEAISEAoMTm9uZUNvbmZpZ0lEEAMSCgoGTm9uZUlEEAQSDgoKTm9uZUNv",
            "bmZpZxAFEg4KClVuZmluaXNoZWQQBhIMCghOb0FjY2VwdBAHEgsKB05vUGFy",
            "YW0QCBITCg9VbkV4cGVjdGVkRXJyb3IQChIPCgtDb25maWdFcnJvchALEg0K",
            "CU91dE9mRGF0ZRAMEgwKCExlc3NHb2xkEA0SDwoLTGVzc0RpYW1vbmQQDhIN",
            "CglMZXNzVGltZXMQDxINCghOb25lUm9sZRDpBxINCghOb25lUHJvcBDqBxIS",
            "Cg1Ob25lRXF1aXBtZW50EOsHEgwKB05vbmVCb3gQ7AcSDQoITm9uZUdvbGQQ",
            "7QcSEAoLTm9ub0RpYW1vbmQQ7gcSEAoLTm9uZU1pc3Npb24Q8wcSFwoST3Bl",
            "cmF0aW9uTm90UGVybWl0ENEPEgsKBk5vdEJ1eRC5FyIpCglPcGVyYXRpb24S",
            "DgoGcmVzdWx0GAEgASgIEgwKBHR5cGUYAiABKAUiHgoKQ3JlYXRlUm9sZRIQ",
            "CghuaWNrbmFtZRgBIAEoCSIbCgxFbnRlckNoYXB0ZXISCwoDY2lkGAEgASgF",
            "IhsKDUZpbmlzaE1pc3Npb24SCgoCaWQYASABKAUiFQoHT3BlbkJveBIKCgJp",
            "ZBgBIAEoBSIVCgdHYWluQm94EgoKAmlkGAEgASgFIiIKBkRlbGV0ZRIKCgJp",
            "ZBgBIAEoBRIMCgR0eXBlGAIgASgFIikKBlZlY3RvchIJCgF4GAEgASgCEgkK",
            "AXkYAiABKAISCQoBehgDIAEoAiKgAQoEUm9sZRIKCgJpZBgBIAEoBRILCgNw",
            "aWQYAiABKAUSCwoDY2lkGAMgASgFEhAKCG5pY2tuYW1lGAQgASgJEg0KBWxl",
            "dmVsGAUgASgFEgwKBGdvbGQYBiABKAUSDwoHZGlhbW9uZBgHIAEoBRIRCgls",
            "b2dpblRpbWUYCCABKAUSEgoKY3JlYXRlVGltZRgJIAEoBRILCgNleHAYCiAB",
            "KAUiOwoEUHJvcBIKCgJpZBgBIAEoBRILCgNyaWQYAiABKAUSCwoDY2lkGAMg",
            "ASgFEg0KBWNvdW50GAQgASgFIiEKBVByb3BzEhgKBnZhbHVlcxgBIAMoCzII",
            "LnBiLlByb3AicgoHQ2hhcHRlchIKCgJpZBgBIAEoBRILCgNyaWQYAiABKAUS",
            "CwoDY2lkGAMgASgFEg4KBnN0YXR1cxgEIAEoBRIPCgdyZWNvcmQxGAUgASgM",
            "Eg8KB3JlY29yZDIYBiABKAwSDwoHcmVjb3JkMxgHIAEoDCInCghDaGFwdGVy",
            "cxIbCgZ2YWx1ZXMYASADKAsyCy5wYi5DaGFwdGVyIkEKB01pc3Npb24SCgoC",
            "aWQYASABKAUSCwoDcmlkGAIgASgFEgsKA2NpZBgDIAEoBRIQCghwcm9ncmVz",
            "cxgEIAEoBSInCghNaXNzaW9ucxIbCgZ2YWx1ZXMYASADKAsyCy5wYi5NaXNz",
            "aW9uIj8KA0JveBIKCgJpZBgBIAEoBRILCgNyaWQYAiABKAUSCwoDY2lkGAMg",
            "ASgFEhIKCnVubG9ja1RpbWUYBCABKAUiIAoFQm94ZXMSFwoGdmFsdWVzGAEg",
            "AygLMgcucGIuQm94IiQKBlJld2FyZBILCgNjaWQYASABKAUSDQoFY291bnQY",
            "AiABKAUiRAoHUmV3YXJkcxIaCgZ2YWx1ZXMYASADKAsyCi5wYi5SZXdhcmQS",
            "DAoEZ29sZBgCIAEoBRIPCgdkaWFtb25kGAMgASgFIjEKDFNpZ25pblJlY29y",
            "ZBINCgV0aW1lcxgBIAEoBRISCgZyZWNvcmQYAiADKAVCAhABIhgKCVNpZ25p",
            "bkdldBILCgNkYXkYASABKAUiFQoHU2hvcEdldBIKCgJpZBgBIAEoBSIvCgpT",
            "aG9wUmVjb3JkEg4KAmlkGAEgAygFQgIQARIRCgV0aW1lcxgCIAMoBUICEAEi",
            "LAoNQ29tcG9zaXRlSXRlbRIKCgJpZBgBIAEoBRIPCgd0aW1lRW5kGAIgASgF",
            "IjEKCEl0ZW1EYXRhEgoKAmlkGAEgASgFEg0KBWNvdW50GAIgASgFEgoKAmhw",
            "GAMgASgFIocBCgpQbGF5ZXJEYXRhEg4KBmhlYWx0aBgBIAEoBRIPCgdzdGFt",
            "aW5hGAIgASgFEhsKBXByb3BzGAMgAygLMgwucGIuSXRlbURhdGESHQoHd2Vh",
            "cG9ucxgEIAMoCzIMLnBiLkl0ZW1EYXRhEhwKCFBvc2l0aW9uGAUgASgLMgou",
            "cGIuVmVjdG9yIlgKCU1hcFJlY29yZBIeCgZ0b3dlcnMYASADKAsyDi5wYi5S",
            "ZWNvcmRJdGVtEh0KBWl0ZW1zGAIgAygLMg4ucGIuUmVjb3JkSXRlbRIMCgR0",
            "aW1lGAMgASgDIjgKDU1hcFJlY29yZFNhdmUSCgoCaWQYASABKAUSCwoDc2Vx",
            "GAIgASgFEg4KBnJlY29yZBgDIAEoDCIqCgpSZWNvcmRJdGVtEgoKAmlkGAEg",
            "ASgFEhAKCGNvbnRlbnRzGAIgASgMIrkBCglCdWlsZERhdGESEAoIYWN0dWFs",
            "SUQYASABKAUSDgoGaGVhbHRoGAIgASgFEhMKC3VwZ3JhZGVUaW1lGAMgASgF",
            "EhIKCnJlcGFpclRpbWUYBCABKAUSJQoKY29tcG9zaXRlcxgFIAMoCzIRLnBi",
            "LkNvbXBvc2l0ZUl0ZW0SGwoFcHJvcHMYBiADKAsyDC5wYi5JdGVtRGF0YRId",
            "Cgd3ZWFwb25zGAcgAygLMgwucGIuSXRlbURhdGEiHwoMQ2FsZW5kYXJEYXRh",
            "Eg8KB21pbnV0ZXMYASABKAUidAoJVG93ZXJEYXRhEhAKCGFjdHVhbElEGAEg",
            "ASgFEg4KBmhlYWx0aBgCIAEoBRITCgt1cGdyYWRlVGltZRgDIAEoBRISCgpy",
            "ZXBhaXJUaW1lGAQgASgFEhwKCFBvc2l0aW9uGAUgASgLMgoucGIuVmVjdG9y",
            "Ii4KD01pc3Npb25JdGVtRGF0YRIKCgJpZBgBIAEoBRIPCgdwcm9jZXNzGAIg",
            "ASgFIlEKC01pc3Npb25EYXRhEgoKAmlkGAEgASgFEiEKBGxpc3QYAiADKAsy",
            "Ey5wYi5NaXNzaW9uSXRlbURhdGESEwoLcmVmcmVzaFRpbWUYAyABKAUiLAoL",
            "TWlzc2lvbkxpc3QSHQoEbGlzdBgBIAMoCzIPLnBiLk1pc3Npb25EYXRhYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Pack), global::Pb.Pack.Parser, new[]{ "Type", "Content", "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Error), global::Pb.Error.Parser, new[]{ "Code", "Type" }, null, new[]{ typeof(global::Pb.Error.Types.EType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Operation), global::Pb.Operation.Parser, new[]{ "Result", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CreateRole), global::Pb.CreateRole.Parser, new[]{ "Nickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.EnterChapter), global::Pb.EnterChapter.Parser, new[]{ "Cid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.FinishMission), global::Pb.FinishMission.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.OpenBox), global::Pb.OpenBox.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.GainBox), global::Pb.GainBox.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Delete), global::Pb.Delete.Parser, new[]{ "Id", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Vector), global::Pb.Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Role), global::Pb.Role.Parser, new[]{ "Id", "Pid", "Cid", "Nickname", "Level", "Gold", "Diamond", "LoginTime", "CreateTime", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Prop), global::Pb.Prop.Parser, new[]{ "Id", "Rid", "Cid", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Props), global::Pb.Props.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Chapter), global::Pb.Chapter.Parser, new[]{ "Id", "Rid", "Cid", "Status", "Record1", "Record2", "Record3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Chapters), global::Pb.Chapters.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Mission), global::Pb.Mission.Parser, new[]{ "Id", "Rid", "Cid", "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Missions), global::Pb.Missions.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Box), global::Pb.Box.Parser, new[]{ "Id", "Rid", "Cid", "UnlockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Boxes), global::Pb.Boxes.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Reward), global::Pb.Reward.Parser, new[]{ "Cid", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Rewards), global::Pb.Rewards.Parser, new[]{ "Values", "Gold", "Diamond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.SigninRecord), global::Pb.SigninRecord.Parser, new[]{ "Times", "Record" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.SigninGet), global::Pb.SigninGet.Parser, new[]{ "Day" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ShopGet), global::Pb.ShopGet.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ShopRecord), global::Pb.ShopRecord.Parser, new[]{ "Id", "Times" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CompositeItem), global::Pb.CompositeItem.Parser, new[]{ "Id", "TimeEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ItemData), global::Pb.ItemData.Parser, new[]{ "Id", "Count", "Hp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.PlayerData), global::Pb.PlayerData.Parser, new[]{ "Health", "Stamina", "Props", "Weapons", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MapRecord), global::Pb.MapRecord.Parser, new[]{ "Towers", "Items", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MapRecordSave), global::Pb.MapRecordSave.Parser, new[]{ "Id", "Seq", "Record" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.RecordItem), global::Pb.RecordItem.Parser, new[]{ "Id", "Contents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.BuildData), global::Pb.BuildData.Parser, new[]{ "ActualID", "Health", "UpgradeTime", "RepairTime", "Composites", "Props", "Weapons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CalendarData), global::Pb.CalendarData.Parser, new[]{ "Minutes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.TowerData), global::Pb.TowerData.Parser, new[]{ "ActualID", "Health", "UpgradeTime", "RepairTime", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MissionItemData), global::Pb.MissionItemData.Parser, new[]{ "Id", "Process" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MissionData), global::Pb.MissionData.Parser, new[]{ "Id", "List", "RefreshTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MissionList), global::Pb.MissionList.Parser, new[]{ "List" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  /// Pack==1
  /// Error==2
  /// Operation==3
  /// CreateRole==4
  /// EnterChapter==5
  ///
  /// Delete==11
  /// SigninRecord==12
  /// SigninGet==13
  /// MapRecordSave==15
  ///
  /// ShopRecord==21
  /// ShopGet==22
  ///
  /// OpenBox==31
  /// GainBox==32
  ///
  /// FinishMission==51
  ///
  /// Role==101
  /// Chapters==102
  /// Missions==104
  /// Sections==105
  /// Boxes==106
  /// Props==107
  /// Rewards==108
  ///
  /// Chapter==1021
  /// Mission==1041
  /// Section==1051
  /// Box==1061
  /// Prop==1071
  /// </summary>
  public sealed partial class Pack : pb::IMessage<Pack> {
    private static readonly pb::MessageParser<Pack> _parser = new pb::MessageParser<Pack>(() => new Pack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack(Pack other) : this() {
      type_ = other.type_;
      content_ = other.content_;
      msgid_ = other.msgid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack Clone() {
      return new Pack(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    /// actions的参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 3;
    private int msgid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (Msgid != other.Msgid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Content);
      }
      if (Msgid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Msgid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Msgid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pack other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadBytes();
            break;
          }
          case 24: {
            Msgid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      code_ = other.code_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pb.Error.Types.EType code_ = 0;
    /// <summary>
    /// 错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Error.Types.EType Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Pb.Error.Types.EType) input.ReadEnum();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Error message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EType {
        [pbr::OriginalName("None")] None = 0,
        /// <summary>
        /// 用户已经登陆
        /// </summary>
        [pbr::OriginalName("UserLoggedIn")] UserLoggedIn = 1,
        /// <summary>
        /// 没有设置好用户名
        /// </summary>
        [pbr::OriginalName("NoSetNickname")] NoSetNickname = 2,
        /// <summary>
        /// 缺少Config ID
        /// </summary>
        [pbr::OriginalName("NoneConfigID")] NoneConfigId = 3,
        /// <summary>
        /// 缺少参数ID
        /// </summary>
        [pbr::OriginalName("NoneID")] NoneId = 4,
        /// <summary>
        /// 缺少配置文件
        /// </summary>
        [pbr::OriginalName("NoneConfig")] NoneConfig = 5,
        /// <summary>
        /// 未完成
        /// </summary>
        [pbr::OriginalName("Unfinished")] Unfinished = 6,
        /// <summary>
        /// 没达到条件，不接受
        /// </summary>
        [pbr::OriginalName("NoAccept")] NoAccept = 7,
        /// <summary>
        /// 缺少参数
        /// </summary>
        [pbr::OriginalName("NoParam")] NoParam = 8,
        /// <summary>
        /// 不期望的错误
        /// </summary>
        [pbr::OriginalName("UnExpectedError")] UnExpectedError = 10,
        /// <summary>
        /// 配置表错误
        /// </summary>
        [pbr::OriginalName("ConfigError")] ConfigError = 11,
        /// <summary>
        /// 已经过期
        /// </summary>
        [pbr::OriginalName("OutOfDate")] OutOfDate = 12,
        /// <summary>
        /// 金币不够
        /// </summary>
        [pbr::OriginalName("LessGold")] LessGold = 13,
        /// <summary>
        /// 钻石不够
        /// </summary>
        [pbr::OriginalName("LessDiamond")] LessDiamond = 14,
        /// <summary>
        /// 超出次数
        /// </summary>
        [pbr::OriginalName("LessTimes")] LessTimes = 15,
        /// <summary>
        /// 还没有创建角色
        /// </summary>
        [pbr::OriginalName("NoneRole")] NoneRole = 1001,
        /// <summary>
        /// 道具不存在
        /// </summary>
        [pbr::OriginalName("NoneProp")] NoneProp = 1002,
        /// <summary>
        /// 装备不存在
        /// </summary>
        [pbr::OriginalName("NoneEquipment")] NoneEquipment = 1003,
        /// <summary>
        /// 箱子不存在
        /// </summary>
        [pbr::OriginalName("NoneBox")] NoneBox = 1004,
        /// <summary>
        /// 金币不足
        /// </summary>
        [pbr::OriginalName("NoneGold")] NoneGold = 1005,
        /// <summary>
        /// 钻石不足
        /// </summary>
        [pbr::OriginalName("NonoDiamond")] NonoDiamond = 1006,
        /// <summary>
        /// 找不到任务
        /// </summary>
        [pbr::OriginalName("NoneMission")] NoneMission = 1011,
        /// <summary>
        /// 操作不允许
        /// </summary>
        [pbr::OriginalName("OperationNotPermit")] OperationNotPermit = 2001,
        /// <summary>
        /// 没有购买
        /// </summary>
        [pbr::OriginalName("NotBuy")] NotBuy = 3001,
      }

    }
    #endregion

  }

  public sealed partial class Operation : pb::IMessage<Operation> {
    private static readonly pb::MessageParser<Operation> _parser = new pb::MessageParser<Operation>(() => new Operation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Operation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation(Operation other) : this() {
      result_ = other.result_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation Clone() {
      return new Operation(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Operation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Operation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Operation other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建角色命令
  /// </summary>
  public sealed partial class CreateRole : pb::IMessage<CreateRole> {
    private static readonly pb::MessageParser<CreateRole> _parser = new pb::MessageParser<CreateRole>(() => new CreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRole(CreateRole other) : this() {
      nickname_ = other.nickname_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRole Clone() {
      return new CreateRole(this);
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 1;
    private string nickname_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nickname != other.Nickname) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nickname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRole other) {
      if (other == null) {
        return;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入章节
  /// </summary>
  public sealed partial class EnterChapter : pb::IMessage<EnterChapter> {
    private static readonly pb::MessageParser<EnterChapter> _parser = new pb::MessageParser<EnterChapter>(() => new EnterChapter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterChapter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterChapter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterChapter(EnterChapter other) : this() {
      cid_ = other.cid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterChapter Clone() {
      return new EnterChapter(this);
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 1;
    private int cid_;
    /// <summary>
    /// 进入章节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterChapter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterChapter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cid != other.Cid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cid != 0) hash ^= Cid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterChapter other) {
      if (other == null) {
        return;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FinishMission : pb::IMessage<FinishMission> {
    private static readonly pb::MessageParser<FinishMission> _parser = new pb::MessageParser<FinishMission>(() => new FinishMission());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishMission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishMission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishMission(FinishMission other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishMission Clone() {
      return new FinishMission(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// mission id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishMission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishMission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishMission other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 打开箱子
  /// </summary>
  public sealed partial class OpenBox : pb::IMessage<OpenBox> {
    private static readonly pb::MessageParser<OpenBox> _parser = new pb::MessageParser<OpenBox>(() => new OpenBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenBox(OpenBox other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenBox Clone() {
      return new OpenBox(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenBox other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 收取箱子里的物品
  /// </summary>
  public sealed partial class GainBox : pb::IMessage<GainBox> {
    private static readonly pb::MessageParser<GainBox> _parser = new pb::MessageParser<GainBox>(() => new GainBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GainBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainBox(GainBox other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainBox Clone() {
      return new GainBox(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GainBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GainBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GainBox other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Delete : pb::IMessage<Delete> {
    private static readonly pb::MessageParser<Delete> _parser = new pb::MessageParser<Delete>(() => new Delete());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Delete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delete(Delete other) : this() {
      id_ = other.id_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delete Clone() {
      return new Delete(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 需要删除的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///  需要删除的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Delete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Delete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Delete other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector : pb::IMessage<Vector> {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 数据
  /// </summary>
  public sealed partial class Role : pb::IMessage<Role> {
    private static readonly pb::MessageParser<Role> _parser = new pb::MessageParser<Role>(() => new Role());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Role> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role(Role other) : this() {
      id_ = other.id_;
      pid_ = other.pid_;
      cid_ = other.cid_;
      nickname_ = other.nickname_;
      level_ = other.level_;
      gold_ = other.gold_;
      diamond_ = other.diamond_;
      loginTime_ = other.loginTime_;
      createTime_ = other.createTime_;
      exp_ = other.exp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role Clone() {
      return new Role(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 3;
    private int cid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 4;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 6;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 7;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "loginTime" field.</summary>
    public const int LoginTimeFieldNumber = 8;
    private int loginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginTime {
      get { return loginTime_; }
      set {
        loginTime_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private int createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 10;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Role);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Role other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Pid != other.Pid) return false;
      if (Cid != other.Cid) return false;
      if (Nickname != other.Nickname) return false;
      if (Level != other.Level) return false;
      if (Gold != other.Gold) return false;
      if (Diamond != other.Diamond) return false;
      if (LoginTime != other.LoginTime) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Exp != other.Exp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (LoginTime != 0) hash ^= LoginTime.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      if (Cid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cid);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Nickname);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Gold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Gold);
      }
      if (Diamond != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Diamond);
      }
      if (LoginTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LoginTime);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CreateTime);
      }
      if (Exp != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (LoginTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginTime);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateTime);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Role other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.LoginTime != 0) {
        LoginTime = other.LoginTime;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 24: {
            Cid = input.ReadInt32();
            break;
          }
          case 34: {
            Nickname = input.ReadString();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Gold = input.ReadInt32();
            break;
          }
          case 56: {
            Diamond = input.ReadInt32();
            break;
          }
          case 64: {
            LoginTime = input.ReadInt32();
            break;
          }
          case 72: {
            CreateTime = input.ReadInt32();
            break;
          }
          case 80: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Prop : pb::IMessage<Prop> {
    private static readonly pb::MessageParser<Prop> _parser = new pb::MessageParser<Prop>(() => new Prop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Prop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prop(Prop other) : this() {
      id_ = other.id_;
      rid_ = other.rid_;
      cid_ = other.cid_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prop Clone() {
      return new Prop(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 2;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 3;
    private int cid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Prop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Prop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Rid != other.Rid) return false;
      if (Cid != other.Cid) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Rid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rid);
      }
      if (Cid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cid);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Prop other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Rid = input.ReadInt32();
            break;
          }
          case 24: {
            Cid = input.ReadInt32();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Props : pb::IMessage<Props> {
    private static readonly pb::MessageParser<Props> _parser = new pb::MessageParser<Props>(() => new Props());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Props> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Props() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Props(Props other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Props Clone() {
      return new Props(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.Prop> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.Prop.Parser);
    private readonly pbc::RepeatedField<global::Pb.Prop> values_ = new pbc::RepeatedField<global::Pb.Prop>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.Prop> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Props);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Props other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Props other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chapter : pb::IMessage<Chapter> {
    private static readonly pb::MessageParser<Chapter> _parser = new pb::MessageParser<Chapter>(() => new Chapter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chapter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter(Chapter other) : this() {
      id_ = other.id_;
      rid_ = other.rid_;
      cid_ = other.cid_;
      status_ = other.status_;
      record1_ = other.record1_;
      record2_ = other.record2_;
      record3_ = other.record3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter Clone() {
      return new Chapter(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 2;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 3;
    private int cid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "record1" field.</summary>
    public const int Record1FieldNumber = 5;
    private pb::ByteString record1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Record1 {
      get { return record1_; }
      set {
        record1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "record2" field.</summary>
    public const int Record2FieldNumber = 6;
    private pb::ByteString record2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Record2 {
      get { return record2_; }
      set {
        record2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "record3" field.</summary>
    public const int Record3FieldNumber = 7;
    private pb::ByteString record3_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Record3 {
      get { return record3_; }
      set {
        record3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chapter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chapter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Rid != other.Rid) return false;
      if (Cid != other.Cid) return false;
      if (Status != other.Status) return false;
      if (Record1 != other.Record1) return false;
      if (Record2 != other.Record2) return false;
      if (Record3 != other.Record3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Record1.Length != 0) hash ^= Record1.GetHashCode();
      if (Record2.Length != 0) hash ^= Record2.GetHashCode();
      if (Record3.Length != 0) hash ^= Record3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Rid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rid);
      }
      if (Cid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cid);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (Record1.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Record1);
      }
      if (Record2.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Record2);
      }
      if (Record3.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Record3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Record1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Record1);
      }
      if (Record2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Record2);
      }
      if (Record3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Record3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chapter other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Record1.Length != 0) {
        Record1 = other.Record1;
      }
      if (other.Record2.Length != 0) {
        Record2 = other.Record2;
      }
      if (other.Record3.Length != 0) {
        Record3 = other.Record3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Rid = input.ReadInt32();
            break;
          }
          case 24: {
            Cid = input.ReadInt32();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 42: {
            Record1 = input.ReadBytes();
            break;
          }
          case 50: {
            Record2 = input.ReadBytes();
            break;
          }
          case 58: {
            Record3 = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chapters : pb::IMessage<Chapters> {
    private static readonly pb::MessageParser<Chapters> _parser = new pb::MessageParser<Chapters>(() => new Chapters());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chapters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapters(Chapters other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapters Clone() {
      return new Chapters(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.Chapter> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.Chapter.Parser);
    private readonly pbc::RepeatedField<global::Pb.Chapter> values_ = new pbc::RepeatedField<global::Pb.Chapter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.Chapter> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chapters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chapters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chapters other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mission : pb::IMessage<Mission> {
    private static readonly pb::MessageParser<Mission> _parser = new pb::MessageParser<Mission>(() => new Mission());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mission(Mission other) : this() {
      id_ = other.id_;
      rid_ = other.rid_;
      cid_ = other.cid_;
      progress_ = other.progress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mission Clone() {
      return new Mission(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 2;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 3;
    private int cid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 4;
    private int progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Rid != other.Rid) return false;
      if (Cid != other.Cid) return false;
      if (Progress != other.Progress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Rid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rid);
      }
      if (Cid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cid);
      }
      if (Progress != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Progress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mission other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Rid = input.ReadInt32();
            break;
          }
          case 24: {
            Cid = input.ReadInt32();
            break;
          }
          case 32: {
            Progress = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Missions : pb::IMessage<Missions> {
    private static readonly pb::MessageParser<Missions> _parser = new pb::MessageParser<Missions>(() => new Missions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Missions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Missions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Missions(Missions other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Missions Clone() {
      return new Missions(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.Mission> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.Mission.Parser);
    private readonly pbc::RepeatedField<global::Pb.Mission> values_ = new pbc::RepeatedField<global::Pb.Mission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.Mission> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Missions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Missions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Missions other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Box : pb::IMessage<Box> {
    private static readonly pb::MessageParser<Box> _parser = new pb::MessageParser<Box>(() => new Box());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Box> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box(Box other) : this() {
      id_ = other.id_;
      rid_ = other.rid_;
      cid_ = other.cid_;
      unlockTime_ = other.unlockTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box Clone() {
      return new Box(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 2;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 3;
    private int cid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "unlockTime" field.</summary>
    public const int UnlockTimeFieldNumber = 4;
    private int unlockTime_;
    /// <summary>
    /// 解锁时间，0为未解锁，否则为解锁结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnlockTime {
      get { return unlockTime_; }
      set {
        unlockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Box);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Box other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Rid != other.Rid) return false;
      if (Cid != other.Cid) return false;
      if (UnlockTime != other.UnlockTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (UnlockTime != 0) hash ^= UnlockTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Rid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rid);
      }
      if (Cid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cid);
      }
      if (UnlockTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnlockTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (UnlockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnlockTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Box other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.UnlockTime != 0) {
        UnlockTime = other.UnlockTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Rid = input.ReadInt32();
            break;
          }
          case 24: {
            Cid = input.ReadInt32();
            break;
          }
          case 32: {
            UnlockTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Boxes : pb::IMessage<Boxes> {
    private static readonly pb::MessageParser<Boxes> _parser = new pb::MessageParser<Boxes>(() => new Boxes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Boxes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Boxes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Boxes(Boxes other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Boxes Clone() {
      return new Boxes(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.Box> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.Box.Parser);
    private readonly pbc::RepeatedField<global::Pb.Box> values_ = new pbc::RepeatedField<global::Pb.Box>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.Box> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Boxes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Boxes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Boxes other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Reward : pb::IMessage<Reward> {
    private static readonly pb::MessageParser<Reward> _parser = new pb::MessageParser<Reward>(() => new Reward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward(Reward other) : this() {
      cid_ = other.cid_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward Clone() {
      return new Reward(this);
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 1;
    private int cid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cid != other.Cid) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reward other) {
      if (other == null) {
        return;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cid = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rewards : pb::IMessage<Rewards> {
    private static readonly pb::MessageParser<Rewards> _parser = new pb::MessageParser<Rewards>(() => new Rewards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rewards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rewards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rewards(Rewards other) : this() {
      values_ = other.values_.Clone();
      gold_ = other.gold_;
      diamond_ = other.diamond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rewards Clone() {
      return new Rewards(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.Reward> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.Reward.Parser);
    private readonly pbc::RepeatedField<global::Pb.Reward> values_ = new pbc::RepeatedField<global::Pb.Reward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.Reward> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private int gold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 3;
    private int diamond_;
    /// <summary>
    /// 钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rewards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rewards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      if (Gold != other.Gold) return false;
      if (Diamond != other.Diamond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gold);
      }
      if (Diamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Diamond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rewards other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 16: {
            Gold = input.ReadInt32();
            break;
          }
          case 24: {
            Diamond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SigninRecord : pb::IMessage<SigninRecord> {
    private static readonly pb::MessageParser<SigninRecord> _parser = new pb::MessageParser<SigninRecord>(() => new SigninRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SigninRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigninRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigninRecord(SigninRecord other) : this() {
      times_ = other.times_;
      record_ = other.record_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigninRecord Clone() {
      return new SigninRecord(this);
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 1;
    private int times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_record_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> record_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已经签到天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Record {
      get { return record_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SigninRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SigninRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Times != other.Times) return false;
      if(!record_.Equals(other.record_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Times != 0) hash ^= Times.GetHashCode();
      hash ^= record_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Times != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Times);
      }
      record_.WriteTo(output, _repeated_record_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      size += record_.CalculateSize(_repeated_record_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SigninRecord other) {
      if (other == null) {
        return;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      record_.Add(other.record_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Times = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SigninGet : pb::IMessage<SigninGet> {
    private static readonly pb::MessageParser<SigninGet> _parser = new pb::MessageParser<SigninGet>(() => new SigninGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SigninGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigninGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigninGet(SigninGet other) : this() {
      day_ = other.day_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigninGet Clone() {
      return new SigninGet(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    /// <summary>
    /// 获取第几天的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SigninGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SigninGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Day != 0) hash ^= Day.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SigninGet other) {
      if (other == null) {
        return;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShopGet : pb::IMessage<ShopGet> {
    private static readonly pb::MessageParser<ShopGet> _parser = new pb::MessageParser<ShopGet>(() => new ShopGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopGet(ShopGet other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopGet Clone() {
      return new ShopGet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 购买商店物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopGet other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShopRecord : pb::IMessage<ShopRecord> {
    private static readonly pb::MessageParser<ShopRecord> _parser = new pb::MessageParser<ShopRecord>(() => new ShopRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopRecord(ShopRecord other) : this() {
      id_ = other.id_.Clone();
      times_ = other.times_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopRecord Clone() {
      return new ShopRecord(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_id_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> id_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已经签到天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Id {
      get { return id_; }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_times_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> times_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已经签到天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Times {
      get { return times_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!id_.Equals(other.id_)) return false;
      if(!times_.Equals(other.times_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= id_.GetHashCode();
      hash ^= times_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      id_.WriteTo(output, _repeated_id_codec);
      times_.WriteTo(output, _repeated_times_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      size += times_.CalculateSize(_repeated_times_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopRecord other) {
      if (other == null) {
        return;
      }
      id_.Add(other.id_);
      times_.Add(other.times_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
          case 18:
          case 16: {
            times_.AddEntriesFrom(input, _repeated_times_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompositeItem : pb::IMessage<CompositeItem> {
    private static readonly pb::MessageParser<CompositeItem> _parser = new pb::MessageParser<CompositeItem>(() => new CompositeItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompositeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompositeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompositeItem(CompositeItem other) : this() {
      id_ = other.id_;
      timeEnd_ = other.timeEnd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompositeItem Clone() {
      return new CompositeItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "timeEnd" field.</summary>
    public const int TimeEndFieldNumber = 2;
    private int timeEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeEnd {
      get { return timeEnd_; }
      set {
        timeEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompositeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompositeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TimeEnd != other.TimeEnd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TimeEnd != 0) hash ^= TimeEnd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TimeEnd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeEnd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TimeEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeEnd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompositeItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TimeEnd != 0) {
        TimeEnd = other.TimeEnd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TimeEnd = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 武器或者道具
  /// </summary>
  public sealed partial class ItemData : pb::IMessage<ItemData> {
    private static readonly pb::MessageParser<ItemData> _parser = new pb::MessageParser<ItemData>(() => new ItemData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData(ItemData other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      hp_ = other.hp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData Clone() {
      return new ItemData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// 道具数量或者武器的子弹装载数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    /// <summary>
    /// 耐久度/血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (Hp != other.Hp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色数据
  /// </summary>
  public sealed partial class PlayerData : pb::IMessage<PlayerData> {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData(PlayerData other) : this() {
      health_ = other.health_;
      stamina_ = other.stamina_;
      props_ = other.props_.Clone();
      weapons_ = other.weapons_.Clone();
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData Clone() {
      return new PlayerData(this);
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 1;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 2;
    private int stamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_props_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Pb.ItemData> props_ = new pbc::RepeatedField<global::Pb.ItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ItemData> Props {
      get { return props_; }
    }

    /// <summary>Field number for the "weapons" field.</summary>
    public const int WeaponsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_weapons_codec
        = pb::FieldCodec.ForMessage(34, global::Pb.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Pb.ItemData> weapons_ = new pbc::RepeatedField<global::Pb.ItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ItemData> Weapons {
      get { return weapons_; }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Pb.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Health != other.Health) return false;
      if (Stamina != other.Stamina) return false;
      if(!props_.Equals(other.props_)) return false;
      if(!weapons_.Equals(other.weapons_)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      hash ^= props_.GetHashCode();
      hash ^= weapons_.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Health != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Health);
      }
      if (Stamina != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stamina);
      }
      props_.WriteTo(output, _repeated_props_codec);
      weapons_.WriteTo(output, _repeated_weapons_codec);
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (Stamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stamina);
      }
      size += props_.CalculateSize(_repeated_props_codec);
      size += weapons_.CalculateSize(_repeated_weapons_codec);
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerData other) {
      if (other == null) {
        return;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      props_.Add(other.props_);
      weapons_.Add(other.weapons_);
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Pb.Vector();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Health = input.ReadInt32();
            break;
          }
          case 16: {
            Stamina = input.ReadInt32();
            break;
          }
          case 26: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
          case 34: {
            weapons_.AddEntriesFrom(input, _repeated_weapons_codec);
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::Pb.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 地图记录
  /// </summary>
  public sealed partial class MapRecord : pb::IMessage<MapRecord> {
    private static readonly pb::MessageParser<MapRecord> _parser = new pb::MessageParser<MapRecord>(() => new MapRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRecord(MapRecord other) : this() {
      towers_ = other.towers_.Clone();
      items_ = other.items_.Clone();
      time_ = other.time_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRecord Clone() {
      return new MapRecord(this);
    }

    /// <summary>Field number for the "towers" field.</summary>
    public const int TowersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.RecordItem> _repeated_towers_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.RecordItem.Parser);
    private readonly pbc::RepeatedField<global::Pb.RecordItem> towers_ = new pbc::RepeatedField<global::Pb.RecordItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.RecordItem> Towers {
      get { return towers_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.RecordItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.RecordItem.Parser);
    private readonly pbc::RepeatedField<global::Pb.RecordItem> items_ = new pbc::RepeatedField<global::Pb.RecordItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.RecordItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!towers_.Equals(other.towers_)) return false;
      if(!items_.Equals(other.items_)) return false;
      if (Time != other.Time) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= towers_.GetHashCode();
      hash ^= items_.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      towers_.WriteTo(output, _repeated_towers_codec);
      items_.WriteTo(output, _repeated_items_codec);
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += towers_.CalculateSize(_repeated_towers_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRecord other) {
      if (other == null) {
        return;
      }
      towers_.Add(other.towers_);
      items_.Add(other.items_);
      if (other.Time != 0L) {
        Time = other.Time;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            towers_.AddEntriesFrom(input, _repeated_towers_codec);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapRecordSave : pb::IMessage<MapRecordSave> {
    private static readonly pb::MessageParser<MapRecordSave> _parser = new pb::MessageParser<MapRecordSave>(() => new MapRecordSave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRecordSave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRecordSave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRecordSave(MapRecordSave other) : this() {
      id_ = other.id_;
      seq_ = other.seq_;
      record_ = other.record_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRecordSave Clone() {
      return new MapRecordSave(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 2;
    private int seq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 3;
    private pb::ByteString record_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Record {
      get { return record_; }
      set {
        record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRecordSave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRecordSave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Seq != other.Seq) return false;
      if (Record != other.Record) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Seq != 0) hash ^= Seq.GetHashCode();
      if (Record.Length != 0) hash ^= Record.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Seq != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Seq);
      }
      if (Record.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Record);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Seq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seq);
      }
      if (Record.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Record);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRecordSave other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Seq != 0) {
        Seq = other.Seq;
      }
      if (other.Record.Length != 0) {
        Record = other.Record;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Seq = input.ReadInt32();
            break;
          }
          case 26: {
            Record = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// id对应的数据
  /// </summary>
  public sealed partial class RecordItem : pb::IMessage<RecordItem> {
    private static readonly pb::MessageParser<RecordItem> _parser = new pb::MessageParser<RecordItem>(() => new RecordItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordItem(RecordItem other) : this() {
      id_ = other.id_;
      contents_ = other.contents_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordItem Clone() {
      return new RecordItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "contents" field.</summary>
    public const int ContentsFieldNumber = 2;
    private pb::ByteString contents_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Contents {
      get { return contents_; }
      set {
        contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Contents != other.Contents) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Contents.Length != 0) hash ^= Contents.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Contents.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Contents);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Contents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Contents);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Contents.Length != 0) {
        Contents = other.Contents;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Contents = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 建筑数据
  /// </summary>
  public sealed partial class BuildData : pb::IMessage<BuildData> {
    private static readonly pb::MessageParser<BuildData> _parser = new pb::MessageParser<BuildData>(() => new BuildData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildData(BuildData other) : this() {
      actualID_ = other.actualID_;
      health_ = other.health_;
      upgradeTime_ = other.upgradeTime_;
      repairTime_ = other.repairTime_;
      composites_ = other.composites_.Clone();
      props_ = other.props_.Clone();
      weapons_ = other.weapons_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildData Clone() {
      return new BuildData(this);
    }

    /// <summary>Field number for the "actualID" field.</summary>
    public const int ActualIDFieldNumber = 1;
    private int actualID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActualID {
      get { return actualID_; }
      set {
        actualID_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "upgradeTime" field.</summary>
    public const int UpgradeTimeFieldNumber = 3;
    private int upgradeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpgradeTime {
      get { return upgradeTime_; }
      set {
        upgradeTime_ = value;
      }
    }

    /// <summary>Field number for the "repairTime" field.</summary>
    public const int RepairTimeFieldNumber = 4;
    private int repairTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepairTime {
      get { return repairTime_; }
      set {
        repairTime_ = value;
      }
    }

    /// <summary>Field number for the "composites" field.</summary>
    public const int CompositesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pb.CompositeItem> _repeated_composites_codec
        = pb::FieldCodec.ForMessage(42, global::Pb.CompositeItem.Parser);
    private readonly pbc::RepeatedField<global::Pb.CompositeItem> composites_ = new pbc::RepeatedField<global::Pb.CompositeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.CompositeItem> Composites {
      get { return composites_; }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_props_codec
        = pb::FieldCodec.ForMessage(50, global::Pb.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Pb.ItemData> props_ = new pbc::RepeatedField<global::Pb.ItemData>();
    /// <summary>
    /// 仓库中才使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ItemData> Props {
      get { return props_; }
    }

    /// <summary>Field number for the "weapons" field.</summary>
    public const int WeaponsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_weapons_codec
        = pb::FieldCodec.ForMessage(58, global::Pb.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Pb.ItemData> weapons_ = new pbc::RepeatedField<global::Pb.ItemData>();
    /// <summary>
    /// 仓库中才使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ItemData> Weapons {
      get { return weapons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActualID != other.ActualID) return false;
      if (Health != other.Health) return false;
      if (UpgradeTime != other.UpgradeTime) return false;
      if (RepairTime != other.RepairTime) return false;
      if(!composites_.Equals(other.composites_)) return false;
      if(!props_.Equals(other.props_)) return false;
      if(!weapons_.Equals(other.weapons_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActualID != 0) hash ^= ActualID.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (UpgradeTime != 0) hash ^= UpgradeTime.GetHashCode();
      if (RepairTime != 0) hash ^= RepairTime.GetHashCode();
      hash ^= composites_.GetHashCode();
      hash ^= props_.GetHashCode();
      hash ^= weapons_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActualID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActualID);
      }
      if (Health != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Health);
      }
      if (UpgradeTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UpgradeTime);
      }
      if (RepairTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RepairTime);
      }
      composites_.WriteTo(output, _repeated_composites_codec);
      props_.WriteTo(output, _repeated_props_codec);
      weapons_.WriteTo(output, _repeated_weapons_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActualID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActualID);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (UpgradeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradeTime);
      }
      if (RepairTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepairTime);
      }
      size += composites_.CalculateSize(_repeated_composites_codec);
      size += props_.CalculateSize(_repeated_props_codec);
      size += weapons_.CalculateSize(_repeated_weapons_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildData other) {
      if (other == null) {
        return;
      }
      if (other.ActualID != 0) {
        ActualID = other.ActualID;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.UpgradeTime != 0) {
        UpgradeTime = other.UpgradeTime;
      }
      if (other.RepairTime != 0) {
        RepairTime = other.RepairTime;
      }
      composites_.Add(other.composites_);
      props_.Add(other.props_);
      weapons_.Add(other.weapons_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActualID = input.ReadInt32();
            break;
          }
          case 16: {
            Health = input.ReadInt32();
            break;
          }
          case 24: {
            UpgradeTime = input.ReadInt32();
            break;
          }
          case 32: {
            RepairTime = input.ReadInt32();
            break;
          }
          case 42: {
            composites_.AddEntriesFrom(input, _repeated_composites_codec);
            break;
          }
          case 50: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
          case 58: {
            weapons_.AddEntriesFrom(input, _repeated_weapons_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 日历数据
  /// </summary>
  public sealed partial class CalendarData : pb::IMessage<CalendarData> {
    private static readonly pb::MessageParser<CalendarData> _parser = new pb::MessageParser<CalendarData>(() => new CalendarData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalendarData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalendarData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalendarData(CalendarData other) : this() {
      minutes_ = other.minutes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalendarData Clone() {
      return new CalendarData(this);
    }

    /// <summary>Field number for the "minutes" field.</summary>
    public const int MinutesFieldNumber = 1;
    private int minutes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minutes {
      get { return minutes_; }
      set {
        minutes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalendarData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalendarData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Minutes != other.Minutes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Minutes != 0) hash ^= Minutes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Minutes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Minutes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Minutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minutes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalendarData other) {
      if (other == null) {
        return;
      }
      if (other.Minutes != 0) {
        Minutes = other.Minutes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Minutes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TowerData : pb::IMessage<TowerData> {
    private static readonly pb::MessageParser<TowerData> _parser = new pb::MessageParser<TowerData>(() => new TowerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerData(TowerData other) : this() {
      actualID_ = other.actualID_;
      health_ = other.health_;
      upgradeTime_ = other.upgradeTime_;
      repairTime_ = other.repairTime_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerData Clone() {
      return new TowerData(this);
    }

    /// <summary>Field number for the "actualID" field.</summary>
    public const int ActualIDFieldNumber = 1;
    private int actualID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActualID {
      get { return actualID_; }
      set {
        actualID_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "upgradeTime" field.</summary>
    public const int UpgradeTimeFieldNumber = 3;
    private int upgradeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpgradeTime {
      get { return upgradeTime_; }
      set {
        upgradeTime_ = value;
      }
    }

    /// <summary>Field number for the "repairTime" field.</summary>
    public const int RepairTimeFieldNumber = 4;
    private int repairTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepairTime {
      get { return repairTime_; }
      set {
        repairTime_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Pb.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TowerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TowerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActualID != other.ActualID) return false;
      if (Health != other.Health) return false;
      if (UpgradeTime != other.UpgradeTime) return false;
      if (RepairTime != other.RepairTime) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActualID != 0) hash ^= ActualID.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (UpgradeTime != 0) hash ^= UpgradeTime.GetHashCode();
      if (RepairTime != 0) hash ^= RepairTime.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActualID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActualID);
      }
      if (Health != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Health);
      }
      if (UpgradeTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UpgradeTime);
      }
      if (RepairTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RepairTime);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActualID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActualID);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (UpgradeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradeTime);
      }
      if (RepairTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepairTime);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TowerData other) {
      if (other == null) {
        return;
      }
      if (other.ActualID != 0) {
        ActualID = other.ActualID;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.UpgradeTime != 0) {
        UpgradeTime = other.UpgradeTime;
      }
      if (other.RepairTime != 0) {
        RepairTime = other.RepairTime;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Pb.Vector();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActualID = input.ReadInt32();
            break;
          }
          case 16: {
            Health = input.ReadInt32();
            break;
          }
          case 24: {
            UpgradeTime = input.ReadInt32();
            break;
          }
          case 32: {
            RepairTime = input.ReadInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::Pb.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 任务数据
  /// </summary>
  public sealed partial class MissionItemData : pb::IMessage<MissionItemData> {
    private static readonly pb::MessageParser<MissionItemData> _parser = new pb::MessageParser<MissionItemData>(() => new MissionItemData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionItemData(MissionItemData other) : this() {
      id_ = other.id_;
      process_ = other.process_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionItemData Clone() {
      return new MissionItemData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 2;
    private int process_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Process != other.Process) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Process != 0) hash ^= Process.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Process != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Process);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Process != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Process);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionItemData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Process != 0) {
        Process = other.Process;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Process = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 任务信息
  /// </summary>
  public sealed partial class MissionData : pb::IMessage<MissionData> {
    private static readonly pb::MessageParser<MissionData> _parser = new pb::MessageParser<MissionData>(() => new MissionData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionData(MissionData other) : this() {
      id_ = other.id_;
      list_ = other.list_.Clone();
      refreshTime_ = other.refreshTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionData Clone() {
      return new MissionData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.MissionItemData> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.MissionItemData.Parser);
    private readonly pbc::RepeatedField<global::Pb.MissionItemData> list_ = new pbc::RepeatedField<global::Pb.MissionItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.MissionItemData> List {
      get { return list_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 3;
    private int refreshTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!list_.Equals(other.list_)) return false;
      if (RefreshTime != other.RefreshTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= list_.GetHashCode();
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RefreshTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      list_.Add(other.list_);
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 24: {
            RefreshTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MissionList : pb::IMessage<MissionList> {
    private static readonly pb::MessageParser<MissionList> _parser = new pb::MessageParser<MissionList>(() => new MissionList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.CommandReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionList(MissionList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionList Clone() {
      return new MissionList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.MissionData> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.MissionData.Parser);
    private readonly pbc::RepeatedField<global::Pb.MissionData> list_ = new pbc::RepeatedField<global::Pb.MissionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.MissionData> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
