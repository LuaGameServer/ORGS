
daemon off; # control by supervisord
worker_processes 4;
error_log _GBC_CORE_ROOT_/logs/nginx-error_NGX_INDEX_.log;
pid _GBC_CORE_ROOT_/tmp/nginx_NGX_INDEX_.pid;

events {
    worker_connections 65535;
}

http {
    include '_GBC_CORE_ROOT_/bin/openresty/nginx/conf/mime.types';

    #跨域
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Headers X-Requested-With;
    add_header Access-Control-Allow-Methods GET,POST,OPTIONS;

    resolver 8.8.8.8;

    #tcp 控制
    tcp_nodelay on;
    tcp_nopush on;


    # logs
    log_format compression '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $bytes_sent '
                        '"$http_referer" "$http_user_agent" "$gzip_ratio"';
    access_log _GBC_CORE_ROOT_/logs/nginx-access_NGX_INDEX_.log compression;

    # tmp
    client_body_temp_path _GBC_CORE_ROOT_/tmp/client_body_temp_NGX_INDEX_;
    fastcgi_temp_path _GBC_CORE_ROOT_/tmp/fastcgi_temp_NGX_INDEX_;
    proxy_temp_path _GBC_CORE_ROOT_/tmp/proxy_temp_NGX_INDEX_;
    scgi_temp_path _GBC_CORE_ROOT_/tmp/scgi_temp_NGX_INDEX_;
    uwsgi_temp_path _GBC_CORE_ROOT_/tmp/uwsgi_temp_NGX_INDEX_;

    # security
    client_max_body_size 32k;
    server_tokens off;
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;
    autoindex off;
    ssi off;

    # lua
    lua_check_client_abort on;
    lua_socket_log_errors off;
    lua_package_path '_GBC_CORE_ROOT_/src/?.lua;_GBC_CORE_ROOT_/apps/?.lua;_GBC_CORE_ROOT_/src/lib/?.lua;;';
    lua_shared_dict _GBC_ 1024k;

    lua_shared_dict sdDBEvent 50m; #数据库消息

    lua_max_pending_timers 2048; #等待中的timer, 如果等待的太多，ngx.timer.at会直接返回了
    lua_max_running_timers 30960;

    lua_code_cache on;

    lua_socket_keepalive_timeout 10000s;
    lua_socket_pool_size 10000;

    init_by_lua '
        require "protobuf"
        require("framework.init")

        local appKeys = dofile("_GBC_CORE_ROOT_/tmp/app_keys_NGX_INDEX_.lua")
        local globalConfig = dofile("_GBC_CORE_ROOT_/tmp/config.lua")

        cc.DEBUG = globalConfig.DEBUG
        cc.exports.GConfig = globalConfig
        cc.exports.GAppKeys = appKeys

        local gbc = cc.import("#gbc")
        cc.exports.nginxBootstrap = gbc.NginxBootstrap:new(appKeys, globalConfig)
        --cc.printinfo("init_by_lua")
    ';

    init_worker_by_lua '
        local worker = cc.import("#worker")
        worker:new():runapp()
        cc.disableGlobal()
    ';

    #限制所有IP 连接数处理数度
    #limit_req_zone $binary_remote_addr zone=allipspeed:30m rate=3r/s;
    #并发连接数限制
    limit_conn_zone $binary_remote_addr zone=allipmax:30m;

    server {
        #limit_req zone=allipspeed burst=1 nodelay;
        limit_conn allipmax 10000;

        listen 8088 so_keepalive=on;
        # listen 8088 so_keepalive=1s:1s:5;

        location = /nginx_status {
            stub_status;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        # apps
        # DO NOT MODIFY BELOW LINES
        #_INCLUDE_APPS_ENTRY_
    }

}
